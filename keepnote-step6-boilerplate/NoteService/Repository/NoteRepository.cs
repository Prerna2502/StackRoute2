using System;
using System.Collections.Generic;
using System.Linq;
using MongoDB.Driver;
using NoteService.Models;


namespace NoteService.Repository
{
    public class NoteRepository : INoteRepository
    {
        //define a private variable to represent NoteContext
        private readonly NoteContext context;
        public NoteRepository(NoteContext _context)
        {
            context = _context;
        }

        //This method should be used to create a new note. NoteId should be autogenerated and
        // must start with 101.This should create a new NotUser if not exists else should push 
        //new note entry into existing NoteUser collection. UserId is identified by CreatedBy
        public bool CreateNote(Note note)
        {
            NoteUser user = context.Notes.Find(x => x.UserId == note.CreatedBy).FirstOrDefault();
            if (user == null)
            {
                NoteUser nu = new NoteUser()
                {
                    UserId = note.CreatedBy,
                    Notes = new List<Note>()
                    {
                        note
                    }
                };
                context.Notes.InsertOne(nu);
            }
            else
            {
                int flag = 0;
                foreach(Note n in user.Notes)
                {
                    if(n.Id == note.Id)
                    {
                        flag = 1;
                    }
                }
                if(flag == 1)
                {
                    return false;
                }
                List<Note> notes = user.Notes;
                notes.Add(note);
                var filter = Builders<NoteUser>.Filter.Where(x => x.UserId == note.CreatedBy);
                var update = Builders<NoteUser>.Update.Set(x => x.Notes, notes);
                context.Notes.UpdateOne(filter, update);
            }

            return true;
        }

        //This method should be used to retreive all notes for a user
        public List<Note> FindAllNotesByUser(string userId)
        {
            return context.Notes.Find(x => x.UserId == userId).FirstOrDefault().Notes;
        }

        //This method should be used to delete a note for a specific user
        public bool DeleteNote(string userId, int noteId)
        {
            NoteUser user = context.Notes.Find(x => x.UserId == userId).FirstOrDefault();
            if (user != null)
            {
                List<Note> notes = user.Notes;
                Note n = notes.Find(x => x.Id == noteId);
                //if(n == null)
                //{
                //    return false;
                //}
                notes.Remove(n);
                var filter = Builders<NoteUser>.Filter.Where(x => x.UserId == userId);
                var update = Builders<NoteUser>.Update.Set(x => x.Notes, notes);
                context.Notes.UpdateOne(filter, update);
                return true;
            }
            else
            {
                return false;
            }
        }

        //This method is used to update an existing note for a user
        public bool UpdateNote(int noteId, string userId, Note note)
        {
            NoteUser user = context.Notes.Find(x => x.UserId == userId).FirstOrDefault();
            if (user != null)
            {
                List<Note> notes = user.Notes;
                Note note1 = null;
                foreach (var n in notes)
                {
                    if (n.Id == noteId)
                    {
                        note1 = n;
                        break;
                    }
                }
                if (note1 == null)
                {
                    return false;
                }
                notes.Remove(note1);
                note.Id = noteId;
                notes.Add(note);
                var filter = Builders<NoteUser>.Filter.Where(x => x.UserId == userId);
                var update = Builders<NoteUser>.Update.Set(x => x.Notes, notes);
                context.Notes.UpdateOne(filter, update);
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}
